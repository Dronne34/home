<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<title>* Fix many errors appeared in previous commit - Some paths was not correctly handled - Simplify and refactorize a bit more * Implemented local &#39;ls&#39; and &#39;cat&#39; commands - Split into dmccat() and dmcls() - dmc - dynamic mail client
</title>
<link rel="icon" type="image/png" href="../favicon.png" />
<link rel="alternate" type="application/atom+xml" title="dmc Atom Feed" href="../atom.xml" />
<link rel="stylesheet" type="text/css" href="../style.css" />
</head>
<body>
<table><tr><td><a href="../../"><img src="../logo.png" alt="" width="32" height="32" /></a></td><td><h1>dmc</h1><span class="desc">dynamic mail client
</span></td></tr><tr class="url"><td></td><td>git clone <a href="git://git.suckless.org/dmc">git://git.suckless.org/dmc</a></td></tr><tr><td></td><td>
<a href="../log.html">Log</a> | <a href="../files.html">Files</a> | <a href="../refs.html">Refs</a> | <a href="../file/README.html">README</a> | <a href="../file/LICENSE.html">LICENSE</a></td></tr></table>
<hr/>
<div id="content">
<pre><b>commit</b> <a href="../commit/23994ab79d4c9e22873526f9c928f934160f8d97.html">23994ab79d4c9e22873526f9c928f934160f8d97</a>
<b>parent</b> <a href="../commit/28ae5038608041eaee262165ac7a1576d64238be.html">28ae5038608041eaee262165ac7a1576d64238be</a>
<b>Author:</b> pancake &lt;<a href="mailto:nopcode.org">nopcode.org</a>&gt;
<b>Date:</b>   Tue, 11 May 2010 00:10:38 +0200

* Fix many errors appeared in previous commit
  - Some paths was not correctly handled
  - Simplify and refactorize a bit more
* Implemented local &#39;ls&#39; and &#39;cat&#39; commands
  - Split into dmccat() and dmcls()
<b>Diffstat:</b>
<table><tr><td><a href="#h0">dmc.c</a></td><td> | </td><td class="num">160</td><td><span class="i">++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="d">-------------------------------</span></td></tr>
</table></pre><pre>1 file changed, 98 insertions(+), 62 deletions(-)
<hr/><b>diff --git a/<a id="h0" href="../file/dmc.c.html">dmc.c</a> b/<a href="../file/dmc.c.html">dmc.c</a></b>
<a href="#h0-0" id="h0-0" class="h">@@ -61,6 +61,18 @@ static const char* wd(const char *fmt, ...) {
</a> 	return ret;
 }
 
<a href="#h0-0-3" id="h0-0-3" class="i">+static const char *abspath(const char *file) {
</a><a href="#h0-0-4" id="h0-0-4" class="i">+	static char filepath[512];
</a><a href="#h0-0-5" id="h0-0-5" class="i">+	char cwd[128];
</a><a href="#h0-0-6" id="h0-0-6" class="i">+	if (*file==&#39;/&#39;)
</a><a href="#h0-0-7" id="h0-0-7" class="i">+		return file;
</a><a href="#h0-0-8" id="h0-0-8" class="i">+	getcwd (cwd, sizeof (cwd));
</a><a href="#h0-0-9" id="h0-0-9" class="i">+	snprintf (filepath, sizeof (filepath)-strlen (file)-3, &quot;%s&quot;, cwd);
</a><a href="#h0-0-10" id="h0-0-10" class="i">+	strcat (filepath, &quot;/&quot;);
</a><a href="#h0-0-11" id="h0-0-11" class="i">+	strcat (filepath, file);
</a><a href="#h0-0-12" id="h0-0-12" class="i">+	return filepath;
</a><a href="#h0-0-13" id="h0-0-13" class="i">+}
</a><a href="#h0-0-14" id="h0-0-14" class="i">+
</a> static const char *dmcalias(const char *filter) {
 	static char line[64];
 	FILE *fd = fopen (wd (&quot;addrbook&quot;), &quot;r&quot;);
<a href="#h0-1" id="h0-1" class="h">@@ -105,6 +117,62 @@ static const char *dmcmailpath(const char *name) {
</a> 	return NULL;
 }
 
<a href="#h0-1-3" id="h0-1-3" class="i">+static int dmccat(const char *file) {
</a><a href="#h0-1-4" id="h0-1-4" class="i">+	char line[128];
</a><a href="#h0-1-5" id="h0-1-5" class="i">+	const char *f = dmcmailpath (file); // XXX dup?
</a><a href="#h0-1-6" id="h0-1-6" class="i">+	if (f &amp;&amp; fexist (f)) {
</a><a href="#h0-1-7" id="h0-1-7" class="i">+		snprintf (line, sizeof (line), &quot;cat &#39;%s&#39;&quot;, f);
</a><a href="#h0-1-8" id="h0-1-8" class="i">+		system (line); // implement native cat
</a><a href="#h0-1-9" id="h0-1-9" class="i">+		return 1;
</a><a href="#h0-1-10" id="h0-1-10" class="i">+	} else fprintf (stderr, &quot;Cannot find &#39;%s&#39;\n&quot;, file);
</a><a href="#h0-1-11" id="h0-1-11" class="i">+	return 0;
</a><a href="#h0-1-12" id="h0-1-12" class="i">+}
</a><a href="#h0-1-13" id="h0-1-13" class="i">+
</a><a href="#h0-1-14" id="h0-1-14" class="i">+static char *gethdr(const char *path, const char *file, const char *hdr) {
</a><a href="#h0-1-15" id="h0-1-15" class="i">+	char line[1024], *ret = NULL;
</a><a href="#h0-1-16" id="h0-1-16" class="i">+	FILE *fd;
</a><a href="#h0-1-17" id="h0-1-17" class="i">+	int i;
</a><a href="#h0-1-18" id="h0-1-18" class="i">+	snprintf (line, sizeof (line), &quot;%s/%s&quot;, path, file);
</a><a href="#h0-1-19" id="h0-1-19" class="i">+	fd = fopen (line, &quot;r&quot;);
</a><a href="#h0-1-20" id="h0-1-20" class="i">+	if (fd) {
</a><a href="#h0-1-21" id="h0-1-21" class="i">+		int len = strlen (hdr);
</a><a href="#h0-1-22" id="h0-1-22" class="i">+		while (!feof (fd)) {
</a><a href="#h0-1-23" id="h0-1-23" class="i">+			fgets (line, sizeof (line), fd);
</a><a href="#h0-1-24" id="h0-1-24" class="i">+			if (!memcmp (line, hdr, len)) {
</a><a href="#h0-1-25" id="h0-1-25" class="i">+				i = strlen (line)-1;
</a><a href="#h0-1-26" id="h0-1-26" class="i">+				if (i&gt;len) {
</a><a href="#h0-1-27" id="h0-1-27" class="i">+					line[i--] = &#39;\0&#39;;
</a><a href="#h0-1-28" id="h0-1-28" class="i">+					if (line[i]==&#39;\r&#39;||line[i]==&#39;\n&#39;)
</a><a href="#h0-1-29" id="h0-1-29" class="i">+						line[i] = &#39;\0&#39;;
</a><a href="#h0-1-30" id="h0-1-30" class="i">+					ret = strdup (line+len);
</a><a href="#h0-1-31" id="h0-1-31" class="i">+				} else ret = strdup (&quot;&quot;);
</a><a href="#h0-1-32" id="h0-1-32" class="i">+				break;
</a><a href="#h0-1-33" id="h0-1-33" class="i">+			}
</a><a href="#h0-1-34" id="h0-1-34" class="i">+		}
</a><a href="#h0-1-35" id="h0-1-35" class="i">+		fclose (fd);
</a><a href="#h0-1-36" id="h0-1-36" class="i">+	}
</a><a href="#h0-1-37" id="h0-1-37" class="i">+	return ret;
</a><a href="#h0-1-38" id="h0-1-38" class="i">+}
</a><a href="#h0-1-39" id="h0-1-39" class="i">+
</a><a href="#h0-1-40" id="h0-1-40" class="i">+static int dmcls(const char *path) {
</a><a href="#h0-1-41" id="h0-1-41" class="i">+	struct dirent *de;
</a><a href="#h0-1-42" id="h0-1-42" class="i">+	DIR *dir;
</a><a href="#h0-1-43" id="h0-1-43" class="i">+	if ((dir = opendir (path))) {
</a><a href="#h0-1-44" id="h0-1-44" class="i">+		while ((de = readdir (dir))) {
</a><a href="#h0-1-45" id="h0-1-45" class="i">+			if (*de-&gt;d_name!=&#39;.&#39;) {
</a><a href="#h0-1-46" id="h0-1-46" class="i">+				char *subj = gethdr (path, de-&gt;d_name, &quot;Subject: &quot;);
</a><a href="#h0-1-47" id="h0-1-47" class="i">+				char *from = gethdr (path, de-&gt;d_name, &quot;From: &quot;);
</a><a href="#h0-1-48" id="h0-1-48" class="i">+				printf (&quot;%s:\t%s\n\t%s\n&quot;, de-&gt;d_name, subj, from);
</a><a href="#h0-1-49" id="h0-1-49" class="i">+				free (from);
</a><a href="#h0-1-50" id="h0-1-50" class="i">+				free (subj);
</a><a href="#h0-1-51" id="h0-1-51" class="i">+			}
</a><a href="#h0-1-52" id="h0-1-52" class="i">+		}
</a><a href="#h0-1-53" id="h0-1-53" class="i">+		closedir (dir);
</a><a href="#h0-1-54" id="h0-1-54" class="i">+		return 1;
</a><a href="#h0-1-55" id="h0-1-55" class="i">+	}
</a><a href="#h0-1-56" id="h0-1-56" class="i">+	return 0;
</a><a href="#h0-1-57" id="h0-1-57" class="i">+}
</a><a href="#h0-1-58" id="h0-1-58" class="i">+
</a> static void dmcinit() {
 	char *tmp = getenv (&quot;EDITOR&quot;);
 	editor = tmp? tmp: EDITOR;
<a href="#h0-2" id="h0-2" class="h">@@ -112,7 +180,6 @@ static void dmcinit() {
</a> 		fprintf (stderr, &quot;Cannot find HOME\n&quot;);
 		exit (1);
 	}
<a href="#h0-2-3" id="h0-2-3" class="d">-	// NOTE: force home to be absolute path
</a> 	snprintf (dmcdir, sizeof (dmcdir), &quot;/%s/&quot;DMCDIR&quot;/&quot;, tmp);
 	if (!fexist (dmcdir))
 	if (mkdir (dmcdir, DIRPERM) == -1) {
<a href="#h0-3" id="h0-3" class="h">@@ -124,7 +191,6 @@ static void dmcinit() {
</a> 	mkdir (wd (&quot;acc&quot;), DIRPERM);
 	acc = dmcaccounts ();
 	defacc = acc[0];
<a href="#h0-3-3" id="h0-3-3" class="d">-	//
</a> 	signal (SIGINT, dmcstop);
 	atexit (dmcstop);
 	reply.out = reply.err = NULL;
<a href="#h0-4" id="h0-4" class="h">@@ -152,32 +218,6 @@ static char *cfgget(const char *key) {
</a> 	return ret;
 }
 
<a href="#h0-4-3" id="h0-4-3" class="d">-static char *gethdr(const char *path, const char *file, const char *hdr) {
</a><a href="#h0-4-4" id="h0-4-4" class="d">-	char line[1024], *ret = NULL;
</a><a href="#h0-4-5" id="h0-4-5" class="d">-	FILE *fd;
</a><a href="#h0-4-6" id="h0-4-6" class="d">-	int i;
</a><a href="#h0-4-7" id="h0-4-7" class="d">-	snprintf (line, sizeof (line), &quot;%s/%s&quot;, path, file);
</a><a href="#h0-4-8" id="h0-4-8" class="d">-	fd = fopen (line, &quot;r&quot;);
</a><a href="#h0-4-9" id="h0-4-9" class="d">-	if (fd) {
</a><a href="#h0-4-10" id="h0-4-10" class="d">-		int len = strlen (hdr);
</a><a href="#h0-4-11" id="h0-4-11" class="d">-		while (!feof (fd)) {
</a><a href="#h0-4-12" id="h0-4-12" class="d">-			fgets (line, sizeof (line), fd);
</a><a href="#h0-4-13" id="h0-4-13" class="d">-			if (!memcmp (line, hdr, len)) {
</a><a href="#h0-4-14" id="h0-4-14" class="d">-				i = strlen (line)-1;
</a><a href="#h0-4-15" id="h0-4-15" class="d">-				if (i&gt;len) {
</a><a href="#h0-4-16" id="h0-4-16" class="d">-					line[i--] = &#39;\0&#39;;
</a><a href="#h0-4-17" id="h0-4-17" class="d">-					if (line[i]==&#39;\r&#39;||line[i]==&#39;\n&#39;)
</a><a href="#h0-4-18" id="h0-4-18" class="d">-						line[i] = &#39;\0&#39;;
</a><a href="#h0-4-19" id="h0-4-19" class="d">-					ret = strdup (line+len);
</a><a href="#h0-4-20" id="h0-4-20" class="d">-				} else ret = strdup (&quot;&quot;);
</a><a href="#h0-4-21" id="h0-4-21" class="d">-				break;
</a><a href="#h0-4-22" id="h0-4-22" class="d">-			}
</a><a href="#h0-4-23" id="h0-4-23" class="d">-		}
</a><a href="#h0-4-24" id="h0-4-24" class="d">-		fclose (fd);
</a><a href="#h0-4-25" id="h0-4-25" class="d">-	}
</a><a href="#h0-4-26" id="h0-4-26" class="d">-	return ret;
</a><a href="#h0-4-27" id="h0-4-27" class="d">-}
</a><a href="#h0-4-28" id="h0-4-28" class="d">-
</a> /* server */
 static int dmcstart(const char *name) {
 	char a0[512], a1[32];
<a href="#h0-5" id="h0-5" class="h">@@ -315,7 +355,8 @@ static void dmcpush(const char *name) {
</a> 	int i;
 
 	for (i=0; acc[i]; i++) {
<a href="#h0-5-3" id="h0-5-3" class="d">-		dir = opendir (wd (&quot;box/%s/out&quot;, acc[i]));
</a><a href="#h0-5-4" id="h0-5-4" class="i">+		snprintf (path, sizeof (path), &quot;%s/box/%s/out&quot;, dmcdir, acc[i]);
</a><a href="#h0-5-5" id="h0-5-5" class="i">+		dir = opendir (path);
</a> 		while ((de = readdir (dir))) {
 			char *n = de-&gt;d_name;
 			if (*n != &#39;.&#39; &amp;&amp; !strstr (n, &quot;.d&quot;)) {
<a href="#h0-6" id="h0-6" class="h">@@ -333,10 +374,9 @@ static void dmcpush(const char *name) {
</a> 	}
 }
 
<a href="#h0-6-3" id="h0-6-3" class="d">-/* utils */
</a> static int fexist(const char *path) {
 	struct stat st;
<a href="#h0-6-6" id="h0-6-6" class="d">-	int ret = stat (path, &amp;st);
</a><a href="#h0-6-7" id="h0-6-7" class="i">+	int ret = path? stat (path, &amp;st): -1;
</a> 	return (ret != -1);
 }
 
<a href="#h0-7" id="h0-7" class="h">@@ -392,7 +432,6 @@ static int dmcsend(const char *file) {
</a> 		&quot;dmc-pack `ls %s.d/* 2&gt;/dev/null` &lt; %s &quot;
 		&quot;| msmtp --user=\&quot;%s\&quot; --from=\&quot;%s\&quot; \&quot;%s\&quot;&quot;,
 		file, file, user, mail, to);
<a href="#h0-7-3" id="h0-7-3" class="d">-	//printf (&quot;LINE: %s\n&quot;, line);
</a> 	if (system (line) != 0) {
 		fprintf (stderr, &quot;Error ocurred while sending %s\n&quot;, file);
 		return 0;
<a href="#h0-8" id="h0-8" class="h">@@ -403,7 +442,7 @@ static int dmcsend(const char *file) {
</a> static int dmcline(const char *line) {
 	char cmd[128];
 	if (!strcmp (line, &quot;?&quot;)) {
<a href="#h0-8-3" id="h0-8-3" class="d">-		printf (&quot;Usage: on off push pull exit ls cat ..\n&quot;);
</a><a href="#h0-8-4" id="h0-8-4" class="i">+		printf (&quot;Usage: on off push pull exit ls lsd cat ..\n&quot;);
</a> 	} else
 	if (!strcmp (line, &quot;login&quot;)) {
 		char *user = cfgget (&quot;USER=&quot;);
<a href="#h0-9" id="h0-9" class="h">@@ -422,8 +461,18 @@ static int dmcline(const char *line) {
</a> 	if (!strcmp (line, &quot;off&quot;)) {
 		dmcstop ();
 	} else
<a href="#h0-9-3" id="h0-9-3" class="i">+	if (!strcmp (line, &quot;ls&quot;)) {
</a><a href="#h0-9-4" id="h0-9-4" class="i">+		if (dmc_pid != -1)
</a><a href="#h0-9-5" id="h0-9-5" class="i">+			dmccmd (&quot;ls\n&quot;);
</a><a href="#h0-9-6" id="h0-9-6" class="i">+		else dmcls (wd (&quot;box/%s/in&quot;, defacc));
</a><a href="#h0-9-7" id="h0-9-7" class="i">+	} else
</a><a href="#h0-9-8" id="h0-9-8" class="i">+	if (!memcmp (line, &quot;cat &quot;, 4)) {
</a><a href="#h0-9-9" id="h0-9-9" class="i">+		if (dmc_pid != -1)
</a><a href="#h0-9-10" id="h0-9-10" class="i">+			dmccmd (line); // bypass
</a><a href="#h0-9-11" id="h0-9-11" class="i">+		else dmccat (line+4);
</a><a href="#h0-9-12" id="h0-9-12" class="i">+	} else
</a> 	if (!strcmp (line, &quot;push&quot;)) {
<a href="#h0-9-14" id="h0-9-14" class="d">-		dmcpush (acc[0]);
</a><a href="#h0-9-15" id="h0-9-15" class="i">+		dmcpush (defacc);
</a> 	} else
 	if (!strcmp (line, &quot;pull&quot;)) {
 		if (dmcstart (acc[0])) {
<a href="#h0-10" id="h0-10" class="h">@@ -445,7 +494,7 @@ static int dmcline(const char *line) {
</a> 
 static int usage(const char *argv0, int lon) {
 	fprintf (stderr, &quot;Usage: %s [-hv] [-c [cmd] [-s file] [-e acc] [-A file ..]\n&quot;
<a href="#h0-10-3" id="h0-10-3" class="d">-		&quot;\t [-a addr] [-m [a [s [..]] [-f m a] [-r m a] [-l [box]]\n&quot;, argv0);
</a><a href="#h0-10-4" id="h0-10-4" class="i">+		&quot;\t[-a addr] [-m [a [s [..]] [-f m a] [-r m a] [-l [box]]\n&quot;, argv0);
</a> 	if (lon) fprintf (stderr,
 		&quot; -m [a [s]..] create mail [addr [subj [file1 file2 ..]]]\n&quot;
 		&quot; -c [cmd]     command shell\n&quot;
<a href="#h0-11" id="h0-11" class="h">@@ -464,10 +513,11 @@ static int usage(const char *argv0, int lon) {
</a> static int dmcmail(const char *addr, const char *subj, const char *slurp, const char *slurptitle) {
 	const char *from = cfgget(&quot;MAIL=&quot;);
 	char file[128], line[128];
<a href="#h0-11-3" id="h0-11-3" class="d">-	int fd;
</a><a href="#h0-11-4" id="h0-11-4" class="i">+	int fd, ret = 0;
</a> 	snprintf (file, sizeof (file), &quot;%s/box/%s/out/mail.XXXXXX&quot;, dmcdir, acc[0]);
 	fd = mkstemp (file);
 	if (fd != -1) {
<a href="#h0-11-8" id="h0-11-8" class="i">+		// TODO: fchmod or mkostemp
</a> 		snprintf (line, sizeof (line),
 			&quot;X-Mailer: dmc v&quot;VERSION&quot;\n&quot;
 			&quot;From: %s\n&quot;
<a href="#h0-12" id="h0-12" class="h">@@ -492,17 +542,19 @@ static int dmcmail(const char *addr, const char *subj, const char *slurp, const 
</a> 			}
 		}
 		close (fd);
<a href="#h0-12-3" id="h0-12-3" class="d">-		snprintf (line, sizeof (line), EDITOR&quot; %s&quot;, file);
</a><a href="#h0-12-4" id="h0-12-4" class="i">+		snprintf (line, sizeof (line), EDITOR&quot; &#39;%s&#39;&quot;, file);
</a> 		system (line);
 		if (fsize (file)&lt;32) {
 			fprintf (stderr, &quot;Aborted\n&quot;);
 			unlink (file);
 		} else {
 			snprintf (line, sizeof (line), &quot;%s/mail.last&quot;, dmcdir);
<a href="#h0-12-11" id="h0-12-11" class="i">+			unlink (line);
</a> 			symlink (file, line);
<a href="#h0-12-13" id="h0-12-13" class="i">+			ret = 1;
</a> 		}
 	} else fprintf (stderr, &quot;Cannot create &#39;%s&#39;\n&quot;, file);
<a href="#h0-12-16" id="h0-12-16" class="d">-	return 0;
</a><a href="#h0-12-17" id="h0-12-17" class="i">+	return ret;
</a> }
 
 static void dmcattach(const char *file) {
<a href="#h0-13" id="h0-13" class="h">@@ -511,11 +563,13 @@ static void dmcattach(const char *file) {
</a> 	while (*name!=&#39;/&#39; &amp;&amp; name&gt;file)
 		name--;
 	name++;
<a href="#h0-13-3" id="h0-13-3" class="d">-	if (readlink (wd (&quot;mail.last&quot;), path, sizeof (path)-10)!=-1) {
</a><a href="#h0-13-4" id="h0-13-4" class="i">+	path[0] = 0;
</a><a href="#h0-13-5" id="h0-13-5" class="i">+	memset (path, 0, sizeof(path));
</a><a href="#h0-13-6" id="h0-13-6" class="i">+	if (readlink (wd (&quot;mail.last&quot;), path, sizeof (path)-strlen (name)-2)!=-1) {
</a> 		strcat (path, &quot;.d/&quot;);
 		mkdir (path, 0750);
 		strcat (path, name);
<a href="#h0-13-10" id="h0-13-10" class="d">-		symlink (file, path);
</a><a href="#h0-13-11" id="h0-13-11" class="i">+		symlink (abspath (file), path);
</a> 	} else fprintf (stderr, &quot;Cannot attach &#39;%s&#39;\n&quot;, file);
 }
 
<a href="#h0-14" id="h0-14" class="h">@@ -573,8 +627,6 @@ static void dmcfwd(const char *file, const char *addr, const char *msg, const ch
</a> 
 int main(int argc, char **argv) {
 	char file[128], line[128];
<a href="#h0-14-3" id="h0-14-3" class="d">-	struct dirent *de;
</a><a href="#h0-14-4" id="h0-14-4" class="d">-	DIR *dir;
</a> 	int i;
 
 	if (argc &lt; 2)
<a href="#h0-15" id="h0-15" class="h">@@ -592,27 +644,11 @@ int main(int argc, char **argv) {
</a> 	switch (argv[1][1]) {
 	case &#39;l&#39;:
 		if (argc&gt;2) {
<a href="#h0-15-3" id="h0-15-3" class="d">-			snprintf (line, sizeof (line), &quot;%s/box/%s/in/%s.eml&quot;, dmcdir, acc[0], argv[2]);
</a><a href="#h0-15-4" id="h0-15-4" class="d">-			if (fexist (line)) {
</a><a href="#h0-15-5" id="h0-15-5" class="d">-				snprintf (line, sizeof (line), &quot;cat &#39;%s/box/%s/in/%s.eml&#39;&quot;,
</a><a href="#h0-15-6" id="h0-15-6" class="d">-					dmcdir, acc[0], argv[2]);
</a><a href="#h0-15-7" id="h0-15-7" class="d">-				system (line); // implement native cat
</a><a href="#h0-15-8" id="h0-15-8" class="i">+			if (dmccat (argv[2]))
</a> 				break;
<a href="#h0-15-10" id="h0-15-10" class="d">-			}
</a> 			snprintf (line, sizeof (line), &quot;%s/box/%s&quot;, dmcdir, argv[2]);
 		} else snprintf (line, sizeof (line), &quot;%s/box/%s/in&quot;, dmcdir, acc[0]);
<a href="#h0-15-13" id="h0-15-13" class="d">-		if ((dir = opendir (line))) {
</a><a href="#h0-15-14" id="h0-15-14" class="d">-			while ((de = readdir (dir))) {
</a><a href="#h0-15-15" id="h0-15-15" class="d">-				if (*de-&gt;d_name!=&#39;.&#39;) {
</a><a href="#h0-15-16" id="h0-15-16" class="d">-					char *subj = gethdr (line, de-&gt;d_name, &quot;Subject: &quot;);
</a><a href="#h0-15-17" id="h0-15-17" class="d">-					char *from = gethdr (line, de-&gt;d_name, &quot;From: &quot;);
</a><a href="#h0-15-18" id="h0-15-18" class="d">-					printf (&quot;%s:\t%s\n\t%s\n&quot;, de-&gt;d_name, subj, from);
</a><a href="#h0-15-19" id="h0-15-19" class="d">-					free (from);
</a><a href="#h0-15-20" id="h0-15-20" class="d">-					free (subj);
</a><a href="#h0-15-21" id="h0-15-21" class="d">-				}
</a><a href="#h0-15-22" id="h0-15-22" class="d">-			}
</a><a href="#h0-15-23" id="h0-15-23" class="d">-			closedir (dir);
</a><a href="#h0-15-24" id="h0-15-24" class="d">-		}
</a><a href="#h0-15-25" id="h0-15-25" class="i">+		dmcls (line);
</a> 		break;
 	case &#39;A&#39;:
 		for (i=2; i&lt;argc; i++)
<a href="#h0-16" id="h0-16" class="h">@@ -711,10 +747,10 @@ int main(int argc, char **argv) {
</a> 		}
 		dmcstop ();
 		break;
<a href="#h0-16-3" id="h0-16-3" class="d">-	case &#39;r&#39;: // reply
</a><a href="#h0-16-4" id="h0-16-4" class="i">+	case &#39;r&#39;:
</a> 		dmcfwd (dmcmailpath (argv[2]), argc&gt;3?argv[3]:&quot;&quot;, REPMSG, REPSUB);
 		break;
<a href="#h0-16-7" id="h0-16-7" class="d">-	case &#39;f&#39;: // forward
</a><a href="#h0-16-8" id="h0-16-8" class="i">+	case &#39;f&#39;:
</a> 		dmcfwd (dmcmailpath (argv[2]), argc&gt;3?argv[3]:&quot;&quot;, FWDMSG, FWDSUB);
 		break;
 	default:
</pre>
</div>
</body>
</html>
